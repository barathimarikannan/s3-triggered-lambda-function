AWSTemplateFormatVersion: '2010-09-09'
Description: AWS Lambda triggered by existing S3 bucket

Resources:

  # IAM Role for Lambda
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaS3Policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub "arn:aws:s3:::lbmfuncbucket/*"

  # Lambda Function
  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: MyLambdaFunction
      Handler: lambda_function.lambda_handler  # Adjust based on your code file
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: lbmfuncbucket  # Use your existing bucket
        S3Key: lambda_function.zip  # Specify the S3 key for your zip file
      Runtime: python3.9  # Choose the appropriate runtime
      Timeout: 30  # Set timeout as per your requirement

  # Lambda Permission for S3 to invoke the Lambda Function
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref MyLambdaFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub "arn:aws:s3:::lbmfuncbucket"

Outputs:
  LambdaFunctionArn:
    Description: "The ARN of the Lambda function"
    Value: !GetAtt MyLambdaFunction.Arn
